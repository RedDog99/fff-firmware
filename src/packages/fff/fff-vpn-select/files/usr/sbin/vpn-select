#!/bin/sh

. /usr/share/libubox/jshn.sh
. /usr/lib/validate_ip

test -f /tmp/started || exit

hood="$(uci get system.@system[0].hood)"

make_config() {
    # remove old config
    >/etc/config/tunneldigger
    rm -f /tmp/fastd_FFF_peers/*
    rm -f /etc/fastd/FFF/peers/*

    json_load "$(cat "/etc/hoods/$hood.hood")"
    json_select vpn
    local count="1"
    while json_select $count > /dev/null
    do
        json_get_var protocol protocol
        if [ "$protocol" = "fastd" ]
        then
            json_get_var servername name
            echo "#name \"$servername\";" > "/etc/fastd/FFF/peers/$servername"
            json_get_var key key
            echo "key \"$key\";" >> "/etc/fastd/FFF/peers/$servername"
            json_get_var address address
            json_get_var port port
            if valid_ip4 "$address"
            then
                echo "remote ipv4 \"$address\" port $port;" >> "/etc/fastd/FFF/peers/$servername"
            elif valid_ip6 "$address"
            then
                echo "remote ipv6 \"$address\" port $port;" >> "/etc/fastd/FFF/peers/$servername"
            else
                echo "Invalid IP-Address provided!"
                rm -f "/etc/fastd/FFF/peers/$servername"
                json_select ".."
                count=$((count+1))
                continue
            fi
            echo "float yes;" >> "/etc/fastd/FFF/peers/$servername"
        elif [ "$protocol" = "tunneldigger" ]
        then
            json_get_var address address
            if ! valid_ip4 "$address" && ! valid_ip6 "$address"
            then
                json_select ".."
                count=$((count+1))
                continue
            fi

            json_get_var port port

            uci set tunneldigger.$count=broker
            uci set tunneldigger.$count.address="$address:$port"
            uci set tunneldigger.$count.uuid="$hostname"
            uci set tunneldigger.$count.interface="l2tp$count"
            uci set tunneldigger.$count.enabled="1"
            uci set tunneldigger.$count.hook_script='/etc/tunneldigger/tunneldigger.hook'
            uci -c /tmp commit tunneldigger
        else
            echo "protocol $protocol is not supported by this script"
            json_select ".."
            count=$((count+1))
            continue
        fi
        json_select ".."
        count=$((count+1))
    done
}

# main
test_ipv4_host1="keyserver.freifunk-franken.de" # Freifunk-Franken keyserver
test_ipv4_host2="8.8.8.8"        # Google DNS
test_ipv6_host1="heise.de"       # heise Zeitschriftenverlag

# Only do something when the router has internet connection
if ping -w5 -c3 "$test_ipv4_host1" >/dev/null 2>&1 ||
   ping -w5 -c3 "$test_ipv4_host2" >/dev/null 2>&1 ||
   ping6 -w5 -c3 "$test_ipv6_host1" >/dev/null 2>&1; then

    # set some vars
    mac=$(awk '{ mac=toupper($1); gsub(":", "", mac); print mac }' /sys/class/net/br-mesh/address 2>/dev/null)
    hostname=$(cat /proc/sys/kernel/hostname)
    [ "$hostname" = "OpenWrt" ] && hostname=""
    [ "$hostname" = "" ] &&  hostname="$mac"

    if [ ! -d /tmp/fastd_FFF_peers ]; then
        # first run after reboot
        mkdir /tmp/fastd_FFF_peers
        # do we have a fastd secret
        if ! egrep "option secret '[0-9a-f]{64}'" /etc/config/fastd >/dev/null 2>&1; then
            secret=$(fastd --generate-key 2>&1 |  awk '/[Ss]ecret/ { print $2 }')
            uci set fastd.FFF.secret="$secret"
            uci commit fastd
        fi
        make_config
        # start fastd only if there are some peers left
        [ "$(ls "/etc/fastd/${project}/peers/"* 2>/dev/null)" ] && /etc/init.d/fastd start
        /etc/init.d/tunneldigger start
    else
        # check if new tunneldigger conf is different
        sumold=$(sha256sum /etc/config/tunneldigger)
        make_config
        sumnew=$(sha256sum /etc/config/tunneldigger)
        [ "$sumnew" != "$sumold" ] && /etc/init.d/tunneldigger restart
        /etc/init.d/fastd reload

        # fastd start/stop for various situations
        if [ "$(ls /etc/fastd/FFF/peers/* 2>/dev/null)" ]; then
            [ -d "/proc/$(cat /tmp/run/fastd.FFF.pid)" ] || /etc/init.d/fastd start
        else
            [ -d "/proc/$(cat /tmp/run/fastd.FFF.pid)" ] && /etc/init.d/fastd stop
        fi

    fi
else
    echo "Der Router kann keine Verbindung zum VPN-Server aufbauen"
    echo "$0 macht nichts!"
fi
